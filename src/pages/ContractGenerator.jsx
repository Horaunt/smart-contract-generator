import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Textarea } from '../components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { useWallet } from '../contexts/WalletContext';
import { Download, Rocket, Loader2, Code } from 'lucide-react';
import axios from 'axios';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { ethers } from 'ethers';

const ContractGenerator = () => {
  const { account, signer } = useWallet();
  const [formData, setFormData] = useState({
    jurisdiction: '',
    contractType: '',
    requirements: '',
    description: '',
    payeeAddress: '',
    payerAddress: ''
  });
  const [isGenerating, setIsGenerating] = useState(false);
  const [isDeploying, setIsDeploying] = useState(false);
  const [generatedCode, setGeneratedCode] = useState('');
  const [error, setError] = useState('');

  const jurisdictions = [
    { value: 'india', label: 'India' },
    { value: 'eu', label: 'European Union' },
    { value: 'us', label: 'United States' }
  ];

  const contractTypes = [
    { value: 'escrow', label: 'Escrow Contract' },
    { value: 'insurance', label: 'Insurance Contract' },
    { value: 'settlement', label: 'Settlement Contract' }
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleGenerate = async () => {
    if (!formData.jurisdiction || !formData.contractType || !formData.requirements) {
      setError('Please fill in all required fields');
      return;
    }

    setIsGenerating(true);
    setError('');

    try {
      // Mock API call - replace with actual backend endpoint
      const response = await new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            data: {
              solidityCode: `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * ${formData.contractType.charAt(0).toUpperCase() + formData.contractType.slice(1)} Contract
 * Jurisdiction: ${formData.jurisdiction.toUpperCase()}
 * Generated by Multi-Jurisdictional Smart Contract Generator
 */
contract ${formData.contractType.charAt(0).toUpperCase() + formData.contractType.slice(1)}Contract {
    address public payee;
    address public payer;
    uint256 public amount;
    bool public completed;
    
    event ContractCreated(address indexed payee, address indexed payer, uint256 amount);
    event ContractCompleted(address indexed payee, address indexed payer, uint256 amount);
    
    modifier onlyPayer() {
        require(msg.sender == payer, "Only payer can call this function");
        _;
    }
    
    modifier onlyPayee() {
        require(msg.sender == payee, "Only payee can call this function");
        _;
    }
    
    constructor(address _payee, address _payer) payable {
        payee = _payee;
        payer = _payer;
        amount = msg.value;
        completed = false;
        
        emit ContractCreated(_payee, _payer, msg.value);
    }
    
    function completeContract() external onlyPayee {
        require(!completed, "Contract already completed");
        require(address(this).balance >= amount, "Insufficient contract balance");
        
        completed = true;
        payable(payee).transfer(amount);
        
        emit ContractCompleted(payee, payer, amount);
    }
    
    function getContractDetails() external view returns (
        address _payee,
        address _payer,
        uint256 _amount,
        bool _completed
    ) {
        return (payee, payer, amount, completed);
    }
}`
            }
          });
        }, 2000);
      });

      // Actual API call would be:
      // const response = await axios.post('/api/generate', formData);
      
      setGeneratedCode(response.data.solidityCode);
    } catch (error) {
      setError('Failed to generate contract. Please try again.');
      console.error('Generation error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedCode) return;

    const blob = new Blob([generatedCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${formData.contractType}_contract.sol`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDeploy = async () => {
    if (!account || !signer || !generatedCode) {
      setError('Please connect your wallet and generate a contract first');
      return;
    }

    setIsDeploying(true);
    setError('');

    try {
      // Simple placeholder contract for deployment demo
      const contractABI = [
        "constructor(address _payee, address _payer) payable"
      ];

      const contractBytecode = "0x608060405234801561001057600080fd5b506040516102c03803806102c08339818101604052810190610032919061007a565b81600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610117565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e4826100b9565b9050919050565b6100f4816100d9565b81146100ff57600080fd5b50565b600081519050610111816100eb565b92915050565b60008060408385031215610130576101126100b4565b5b600061013e85828601610102565b925050602061014f85828601610102565b9150509250929050565b610199806101676000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a035b1fe1461003b578063fc0c546a14610059575b600080fd5b610043610077565b60405161005091906100a2565b60405180910390f35b610061610081565b60405161006e91906100bd565b60405180910390f35b6000600254905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b6100bc816100a9565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ed826100c2565b9050919050565b6100fd816100e2565b82525050565b600060208201905061011860008301846100f4565b9291505056fea2646970667358221220c4c3c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c464736f6c63430008130033";

      const factory = new ethers.ContractFactory(contractABI, contractBytecode, signer);
      
      const payeeAddress = formData.payeeAddress || account;
      const payerAddress = formData.payerAddress || account;
      
      const contract = await factory.deploy(payeeAddress, payerAddress, {
        value: ethers.parseEther("0.01") // 0.01 ETH as example
      });

      await contract.waitForDeployment();
      const contractAddress = await contract.getAddress();

      alert(`Contract deployed successfully!\nAddress: ${contractAddress}`);
      
    } catch (error) {
      setError('Failed to deploy contract. Please check your wallet and try again.');
      console.error('Deployment error:', error);
    } finally {
      setIsDeploying(false);
    }
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Contract Generator</h1>
        <p className="text-muted-foreground">
          Generate smart contracts tailored to specific jurisdictions and requirements.
        </p>
      </div>

      <div className="grid gap-8 lg:grid-cols-2">
        {/* Form */}
        <Card>
          <CardHeader>
            <CardTitle>Contract Configuration</CardTitle>
            <CardDescription>
              Fill in the details to generate your smart contract
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="jurisdiction">Jurisdiction *</Label>
                <Select onValueChange={(value) => handleInputChange('jurisdiction', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select jurisdiction" />
                  </SelectTrigger>
                  <SelectContent>
                    {jurisdictions.map((jurisdiction) => (
                      <SelectItem key={jurisdiction.value} value={jurisdiction.value}>
                        {jurisdiction.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="contractType">Contract Type *</Label>
                <Select onValueChange={(value) => handleInputChange('contractType', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select contract type" />
                  </SelectTrigger>
                  <SelectContent>
                    {contractTypes.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="requirements">Requirements *</Label>
              <Textarea
                id="requirements"
                placeholder="Describe the specific requirements for your contract..."
                value={formData.requirements}
                onChange={(e) => handleInputChange('requirements', e.target.value)}
                className="min-h-[100px]"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="Additional description or context..."
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                className="min-h-[80px]"
              />
            </div>

            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="payeeAddress">Payee Address</Label>
                <Input
                  id="payeeAddress"
                  placeholder="0x..."
                  value={formData.payeeAddress}
                  onChange={(e) => handleInputChange('payeeAddress', e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="payerAddress">Payer Address</Label>
                <Input
                  id="payerAddress"
                  placeholder="0x..."
                  value={formData.payerAddress}
                  onChange={(e) => handleInputChange('payerAddress', e.target.value)}
                />
              </div>
            </div>

            {error && (
              <div className="p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md">
                {error}
              </div>
            )}

            <Button 
              onClick={handleGenerate} 
              disabled={isGenerating}
              className="w-full"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Code className="mr-2 h-4 w-4" />
                  Generate Contract
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Generated Code */}
        <Card>
          <CardHeader>
            <CardTitle>Generated Contract</CardTitle>
            <CardDescription>
              Your generated Solidity smart contract code
            </CardDescription>
          </CardHeader>
          <CardContent>
            {generatedCode ? (
              <div className="space-y-4">
                <div className="max-h-96 overflow-auto border rounded-md">
                  <SyntaxHighlighter
                    language="solidity"
                    style={tomorrow}
                    customStyle={{
                      margin: 0,
                      fontSize: '12px',
                      background: 'transparent'
                    }}
                  >
                    {generatedCode}
                  </SyntaxHighlighter>
                </div>
                
                <div className="flex gap-2">
                  <Button onClick={handleDownload} variant="outline" className="flex-1">
                    <Download className="mr-2 h-4 w-4" />
                    Download
                  </Button>
                  <Button 
                    onClick={handleDeploy} 
                    disabled={!account || isDeploying}
                    className="flex-1"
                  >
                    {isDeploying ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Deploying...
                      </>
                    ) : (
                      <>
                        <Rocket className="mr-2 h-4 w-4" />
                        Deploy via MetaMask
                      </>
                    )}
                  </Button>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-64 text-muted-foreground">
                <div className="text-center">
                  <Code className="mx-auto h-12 w-12 mb-4 opacity-50" />
                  <p>Generate a contract to see the code here</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ContractGenerator;
